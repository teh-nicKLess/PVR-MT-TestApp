<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="MT Piano" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="directional" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object at="0.5 -1 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
          <constraint persistency="666"/>
        </Object>
        <Object accept_root="1" aspect="1" at="-0.132065 8.45 0.776441" at_dir="0" base_name="Default" far="512" fov="1.0472" from="-0.0776171 18.6999 11.8326" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="PianoKey" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	class PianoKey:
		def __init__(self, name, freq, isWhite):
			self.sound = VR.Sound()
			self.state = 0.0
			self.name = name
			self.freq = freq
			self.isWhite = isWhite
			
			self.geom = VR.Geometry(name)
			
		def createGeometry(self, w, h, l, r=0):
			self.geom.setPrimitive("Box {} {} {} 1 1 1".format(w,h,l))						
			self.geom.translate([0, -h*0.5, l*0.5])
			self.geom.applyTransformation()
			
			if self.isWhite:
				self.geom.setMaterial(VR.mats["WhiteKey"])
			
				# Create the rounded lip on the front of the white key
				lip = VR.Geometry("Lip " + self.name)
				lip.setPrimitive("Cylinder "+str(w)+" "+str(r)+" 8 1 1 1")
				lip.setPosition([0, -r, l])
				lip.setUp([1,0,0])
				lip.setMaterial(VR.mats["WhiteKey"])
				
				self.geom.addChild(lip)
			else:
				self.geom.setMaterial(VR.mats["BlackKey"])

			return self.geom
			
	return PianoKey(name, freq, isWhite)
		
</core>
      <arg type="str" value="0" base_name="name" name_space="PianoKey" name_suffix="0" persistency="666"/>
      <arg type="int" value="0" base_name="freq" name_space="PianoKey" name_suffix="0" persistency="666"/>
      <arg type="int" value="0" base_name="isWhite" name_space="PianoKey" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="animKeyCB" group="Animations" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	geom = key.geom
	name = geom.getName()
	
	if pressed:
		if name not in VR.pressAnimation:
			VR.createAnimPath(geom, pressed)
			
		
		path = VR.pressAnimation[name]
		
		def pressAnim(t):		
			geom.setPose(path.getPose(t))
			key.state = t
			#if t == 1: 
			#	print key.freq
			#	VR.playSound(key.freq)
		
		anim = VR.Animation('Press ' + name)
		anim.setCallback(pressAnim)
		anim.setDuration(0.04)
		anim.start()
	else:
		if name not in VR.releaseAnimation:
			VR.createAnimPath(geom, pressed)
		
		path = VR.releaseAnimation[name]
			
		def releaseAnim(t):
			geom.setPose(path.getPose(t))
			key.state = 1 - t
		
		anim = VR.Animation('Release ' + name)
		anim.setCallback(releaseAnim)
		anim.setDuration(0.1)
		anim.start()

</core>
      <arg type="VRPyObjectType" value="0" base_name="key" name_space="animKeyCB" name_suffix="0" persistency="666"/>
      <arg type="int" value="0" base_name="pressed" name_space="animKeyCB" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="createAnimPath" group="Animations" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	name = key.getName()
	pose = key.getPose()
	pos0 = pose.pos()
	dir0 = pose.dir()
	up0 = pose.up()
	
	dirNormal  = [0,0,-1]
	dirPressed = [0,0.1, -1]
	
	dirHalf = [0,0,0]
	for i in range(3):
		dirHalf[i] = (dirNormal[i] + dirPressed[i]) * 0.5
	#dirHalf = [(dirNormal[i] + dirPressed[i]) * 0.5 for i in range(3)]
			
	
	
	path = VR.Path()
	if pressed:
		path.addPoint(pos0, dirNormal, [0,0,0], up0)	
		path.addPoint(pos0, dirHalf, [0,0,0], up0)
		path.addPoint(pos0, dirPressed, [0,0,0], up0)
		
		path.compute(2)
		VR.pressAnimation[name] = path
	else:
		path.addPoint(pos0, dirPressed, [0,0,0], up0)
		path.addPoint(pos0, dirHalf, [0,0,0], up0)
		path.addPoint(pos0, dirNormal, [0,0,0], up0)
		
		path.compute(2)
		VR.releaseAnimation[name] = path
</core>
      <arg type="VRPyTransformType" value="0" base_name="key" name_space="createAnimPath" name_suffix="0" persistency="666"/>
      <arg type="int" value="0" base_name="pressed" name_space="createAnimPath" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="init" group="Inits" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	import time	
	
	# Light
	if hasattr(VR, 'lamp'): 
		VR.lamp.destroy()
		del VR.lamp
	
	VR.lamp = VR.Light('Lamp', 'light')
	#VR.lamp.toggleShadows(True)
	#VR.lamp.setOn(False)
	beacon = VR.LightBeacon('Lamp_Beacon')
	beacon.setTransform([0, 20, 0], [0, -1, 0], [0,1,0])
	VR.lamp.setBeacon(beacon)

	VR.scene = VR.Object('Scene')
	VR.lamp.addChild(VR.scene)
	
	
	# Set up camera
	cam = VR.find('Default')
	
	# Setup for the table
	#cam.setTransform([4.5,15,2], [0,0,-1], [0,1,0])
	
	# Setup for the screen
	cam.setTransform([0,18,3],[0,-10,-4],[0,1,0])
	
	VR.initMaterials()
	
	VR.target = {}
	VR.pressAnimation = {}
	VR.releaseAnimation = {}
	
	VR.keys = {}

	
	# Floor
	floor = VR.Geometry("Floor")
	floor.setPrimitive("Plane 20 20 1 1")
	floor.setTransform([0, 0, 0], [0, 1, 0], [0,0,1])
	floor.setColor("brown")
	VR.scene.addChild(floor)

	
	VR.initPiano()
	
	VR.piano = VR.Sound()
	
	VR.initViews()
</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="114" base_name="trigger" name_space="__global__" name_suffix="5" persistency="666"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="7" persistency="666"/>
    </Script>
    <Script base_name="initMaterials" group="Inits" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	VR.mats = {}
	
	pianoMat = VR.Material("Piano")
	pianoMat.setAmbient([0.001,0.001,0.001])
	pianoMat.setDiffuse([0.4,0.25,0.1])
	pianoMat.setSpecular([0.99,0.99,0.99])
	VR.mats["Piano"] = pianoMat
	
	lightMat = VR.Material("WhiteKey")
	lightMat.setAmbient([0.1,0.1,0.1])
	lightMat.setDiffuse([0.999,0.999,0.995])
	lightMat.setSpecular([0.999,0.999,0.999])
	VR.mats["WhiteKey"] = lightMat
	
	darkMat = VR.Material("BlackKey")
	darkMat.setAmbient([0.01,0.01,0.01])
	darkMat.setDiffuse([0.29,0.27,0.25])
	darkMat.setSpecular([0.99,0.99,0.99])
	VR.mats["BlackKey"] = darkMat
</core>
    </Script>
    <Script base_name="initPiano" group="Inits" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if VR.find("Piano Base") != None:
		VR.find("Piano Base").destroy()
	
	
	nWhiteKeys = 52
	nBlackKeys = 36
	nKeys = 88
	
	whiteDim = [0.24, 0.25, 1.5]
	blackDim = [0.18, 0.35, 1.0]
	lipRadius = 0.016
	dist = 0.015


	## Formula for frequencies had numeric problems
	## Following values are taken from wikipedia.org/wiki/Piano_key_frequencies
	keyNote = ['A', 'A#', 'H', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']
	frequencies = [27.5000, 29.1352, 30.8677, 32.7032, 34.6478, 36.7081,
					38.8909, 41.2034, 43.6535, 46.2493, 48.9994, 51.9131,
					55.0000, 58.2705, 61.7354, 65.4064, 69.2957, 73.4162,
					77.7817, 82.4069, 87.3071, 92.4986, 97.9989, 103.826,
					110.000, 116.541, 123.471, 130.813, 138.591, 146.832,
					155.563, 164.814, 174.614, 184.997, 195.998, 207.652,
					220.000, 233.082, 246.942, 261.626, 277.183, 293.665,
					311.127, 329.628, 349.228, 369.994, 391.995, 415.305,
					440.000, 466.164, 493.883, 523.251, 554.365, 587.330,
					622.254, 659.255, 698.456, 739.989, 783.991, 830.609,
					880.000, 932.328, 987.767, 1046.50, 1108.73, 1174.66,
					1244.51, 1318.51, 1396.91, 1479.98, 1567.98, 1661.22,
					1760.00, 1864.66, 1975.53, 2093.00, 2217.46, 2349.32,
					2489.02, 2637.02, 2793.83, 2959.96, 3135.96, 3322.44,
					3520.00, 3729.31, 3951.07, 4186.01]
	
	
	# Piano Base
	
	w = (nWhiteKeys + 2) * (whiteDim[0] + dist)
	l = 2.2 * whiteDim[2]
	h = 0.4
	
	x = 0.0
	z = 0.0
	
	base = VR.Geometry("Piano Base")
	base.setPrimitive("Box " + str(w) + " " + str(h) + " " + str(l) + " 1 1 1")
	base.setPosition([x, 8.0, -z])
	base.setMaterial(VR.mats["Piano"])
	
	VR.scene.addChild(base)
	
	stand = VR.Geometry("Piano Stand")
	stand.setPrimitive("Box " + str(w) + " 10.0 " + str(0.5*l) + " 1 1 1")
	stand.setPosition([x, -3, -0.25*l])
	stand.setMaterial(VR.mats["Piano"])
	base.addChild(stand)
	
	
	whitePos = [-(whiteDim[0] + dist) * (nWhiteKeys - 1) / 2.0,
				0.325 + whiteDim[1]*0.5,
				0]
				
	blackPos = [-(whiteDim[0] + dist) * (nWhiteKeys - 2) / 2.0,
				0.375 + blackDim[1]*0.5,
				0]
	
	x=y=z=w=h=l = 0.0
	whiteKey = False
	
	root2 = 2.0**(1/12.0)
	
	for i in range(nKeys):
		
		if (i%12) in [1,4,6,9,11]:
			x,y,z = blackPos
			w,h,l = blackDim
			whiteKey = False
		else:
			x,y,z = whitePos
			w,h,l = whiteDim
			whiteKey = True
			
		name = keyNote[i % 12] + " " + str(i/12)
		#freq = root2**(i-49) * 440
		freq = frequencies[i]
		
		
		k = VR.PianoKey(name, freq, whiteKey)
		kGeom = k.createGeometry(w, h, l, lipRadius)				
		kGeom.setPosition([x, y, z])
		
		base.addChild(kGeom)
		VR.keys[name] = k
		
		if whiteKey:
			whitePos[0] += w + dist
		else:
			blackPos[0] += whiteDim[0] + dist
			if (i%12) in [1,6]:
				blackPos[0] += whiteDim[0] + dist
</core>
    </Script>
    <Script base_name="initViews" group="Inits" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	''' Reset the view projections for the holobench views
	to usable values on startup'''
	
	## Setup for 4 views; HoloBench 2x2
	if VR.getSetup().getView(3) is not None:
		pose = VR.Pose([0,0,-1], [0,0,1], [0,-1,0])

		VR.getSetup().getView(0).setPose(pose)
		VR.getSetup().getView(1).setPose(pose)
	
		pose.setUp([0,1,0])
	
		VR.getSetup().getView(2).setPose(pose)
		VR.getSetup().getView(3).setPose(pose)
		
	## Setup for a single view; HoloBench 1x1 or Dimension
	else:
		pose = VR.Pose([0,0,-1], [0,0,1], [0,1,0])
		VR.getSetup().getView(0).setPose(pose)
		pass
	
</core>
    </Script>
    <Script base_name="keyDrag" group="Interactions" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	'''
	Evaluated regurlarly. 
	'''
	
	for key,target in VR.target.items():
		if target == None:
			break
		
		dev = target[0]	
		caster = dev.getBeacon(key)
		
		if not dev.intersect(target[1], False, caster, [0,0,-1]):
			relKey = target[1].getName()
			if relKey in VR.keys:
				VR.animKeyCB(VR.keys[relKey], False)
			
			
			dev.intersect(VR.getRoot(), True, caster, [0,0,-1])
			
			target = dev.getIntersected()
			name = target.getName()
			
			if name in VR.keys:
				VR.target[key] = (dev, target)
				VR.animKeyCB(VR.keys[name], True)

</core>
      <arg type="VRPyDeviceType" value="0" base_name="arg" name_space="keyDrag" name_suffix="0" persistency="666"/>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" base_name="trigger" name_space="__global__" name_suffix="9" persistency="666"/>
    </Script>
    <Script base_name="keyPress" group="Interactions" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	'''
	Executed for each finger at start of touch event. Tests if the beacon of 
	the finger is intersecting a piano key, and will animate the key accordingly
	'''

	key = dev.getKey()

	#print dev.getName() + "["+ str(key) +"]: " + ("Pressed" if dev.getKeyState(key) else "Released")
	#print "Position: " + str(dev.getBeacon().getDir())
	
	caster = dev.getBeacon(key)
	## caster has to be specified, otherwise intersect would be determined using
	## the default beacon (the one for key 0)
	if dev.intersect(VR.getRoot(), False, caster, [0,0,-1]):
		target = dev.getIntersected()
		
		## Remember for each finger which key it presses
		name = target.getName()
		if name in VR.keys:
			print name
			VR.target[key] = (dev, target)
			VR.animKeyCB(VR.keys[name], True)
</core>
      <trig type="on_device" dev="mouse" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="5" persistency="666"/>
      <trig type="on_device" dev="multitouch" state="Pressed" param="" key="-1" base_name="trigger" name_space="__global__" name_suffix="7" persistency="666"/>
    </Script>
    <Script base_name="keyRelease" group="Interactions" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	'''
	Executed for each finger at end of touch event. Tests if the finger was on
	a piano key previous to release. If so will animate the key accordingly.
	'''
	
	key = dev.getKey()


	caster = dev.getBeacon(key)
	if key in VR.target and VR.target[key] is not None:
		target = VR.target[key][1]
			
		name = target.getName()
		if name in VR.keys:
			VR.animKeyCB(VR.keys[name], False)
			
		
	VR.target[key] = None
</core>
      <trig type="on_device" dev="mouse" state="Released" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="6" persistency="666"/>
      <trig type="on_device" dev="multitouch" state="Released" param="" key="-1" base_name="trigger" name_space="__global__" name_suffix="8" persistency="666"/>
    </Script>
    <Script base_name="playSound" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	#from math import sin
	
	# A4 440
	Ac = 32760
	wc = 440
	pc = 0

	Am = 0
	wm = 32
	pm = 0

	T = 0.4
	
	#f = wc*(1.059463)**(k)
	sound.synthesize(Ac, freq, pc, Am, wm, pm, duration)
	#print freq
	
	"""
	else:
		#buf = [ [0,0] for i in range(100000) ]
		#for i in range(100):
		#	buf[450+i] = [2,0]
		#buf[300] = [300,32760]
		#buf[300] = [300,1000]
		freqs = []
		freqs.append([100,32760])
		freqs.append([200,32760])
		freqs.append([300,32760])
		freqs.append([400,32760])
		freqs.append([500,32760])
		VR.piano.synthBuffer(freqs,1)
	"""
	
	
</core>
      <arg type="float" value="0" base_name="freq" name_space="playSound" name_suffix="0" persistency="666"/>
      <arg type="float" value="0" base_name="duration" name_space="playSound" name_suffix="0" persistency="666"/>
      <arg type="NoneType" value="None" base_name="sound" name_space="playSound" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="updateKeys" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	for ID,key in VR.keys.items():
		if key.state &gt; 0.9:
			if key.sound.getQueuedBuffer() &lt; 2:
				VR.playSound(key.freq, 0.1, key.sound)
			key.sound.recycleBuffer()
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" base_name="trigger" name_space="__global__" name_suffix="10" persistency="666"/>
    </Script>
    <Script base_name="viewSetup" group="no group" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	'''
	Attempt to set up multiple cameras for independent views 
	of the four viewports in the holobench setup. Does not 
	really work.'''
	
	
	if VR.find("CamBox"):
		VR.find("CamBox").destroy()
		'''for cam in VR.cams:
			cam.destroy()
		del VR.cams'''
		
		
	# View IDs
	# 0-3:  TV views
	# 4:	Computer Screen
	
	light = VR.find("light")
	
	'''for x in range(4):		
		view = VR.getSetup().getView(x)
		view.setCamera(VR.find("Setup"))'''
	
	
	camBox = VR.Object("CamBox", "light")
	
	# Create four cameras named 'Cam_0' to 'Cam_4'
	VR.cams = [VR.Camera("Cam_" + str(x), "CamBox") for x in range(4)]
	
	for x in range(4):
		VR.cams[x].setPosition([-12 + 8*x, 15, 7])
		VR.cams[x].setAt([0,5,0])
		
		view = VR.getSetup().getView(x)
		view.setCamera(VR.cams[x])
	
	
	VR.getSetup().getView(4).setCamera(VR.find("Default"))
	#VR.find("Default").activate()
	
	
	## getWindow() crashes PVR
	#window  = VR.getSetup().getWindow(0)
</core>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.739269 0.842603 1" format=".jpg" path="./gfx/skybox/sky" persistency="666" type="2"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
