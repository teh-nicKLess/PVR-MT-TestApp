<?xml version="1.0" encoding="UTF-8"?>
<Scene base_name="MT Piano" name_space="Scene" name_suffix="0" persistency="666">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="light" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="directional" name_space="__global__" name_suffix="0" on="1" persistency="666" photometricMap="" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowMapRes="2048" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object at="0.5 -1 -1" at_dir="0" base_name="Headlight_beacon" from="0 0 0" light="light" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1">
          <constraint persistency="666"/>
        </Object>
        <Object accept_root="1" aspect="1" at="-0.448694 8.55 0.775779" at_dir="0" base_name="Default" far="512" fov="1.0472" from="-1.23251 8.71575 1.62989" name_space="__global__" name_suffix="0" near="0.1" orthoSize="100" persistency="666" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <constraint persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" fxaa="0" hmdd="0" marker="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="animBlackKey" group="Animations" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	name = key.getName()
	pose = key.getPose()
	pos0 = pose.pos()
	dir0 = pose.dir()
	up0 = pose.up()
#	zStart = cDir[2]
	
	if pressed:
		if name not in VR.pressAnimation:
			path = VR.Path()
			path.addPoint(pos0, dir0, [0,0,0], up0)
		
			dir1 = dir0 + [0, 0.07, 0]
			path.addPoint(pos0, dir1, [0,0,0], up0)
		
			dir2 = dir0 + [0, 0.14, 0]
			path.addPoint(pos0, dir1, [0,0,0], up0)
		
			path.compute(2)
		
			VR.pressAnimation[name] = path
		else:
			path = VR.pressAnimation[name]
	else:
		if name not in VR.releaseAnimation:
			path = VR.Path()
			path.addPoint(pos0, dir0, [0,0,0], up0)
		
			dir1 = dir0 - [0, 0.07, 0]
			path.addPoint(pos0, dir1, [0,0,0], up0)
		
			dir2 = dir0 - [0, 0.14, 0]
			path.addPoint(pos0, dir1, [0,0,0], up0)
		
			path.compute(2)
		
			VR.releaseAnimation[name] = path
		else:
			path = VR.releaseAnimation[name]
		
	#TODO: doAnimation
	#key.animate(path, duration, offset, doOrient?, doLoop)
	key.animate(path, 0.2, 0, True, False)
</core>
      <arg type="VRPyTransformType" value="0" base_name="key" name_space="animBlackKey" name_suffix="0" persistency="666"/>
      <arg type="int" value="0" base_name="pressed" name_space="animBlackKey" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="animWhiteKey" group="Animations" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	name = key.getName()
	pose = key.getPose()
	pos0 = pose.pos()
	dir0 = pose.dir()
	up0 = pose.up()
#	zStart = cDir[2]
	
	if pressed:
		if name not in VR.pressAnimation:
			path = VR.Path()
			path.addPoint(pos0, dir0, [0,0,0], up0)
		
			dir1 = dir0 + [0, 0.1, 0]
			path.addPoint(pos0, dir1, [0,0,0], up0)
		
			dir2 = dir0 + [0, 0.2, 0]
			path.addPoint(pos0, dir1, [0,0,0], up0)
		
			path.compute(2)
		
			VR.pressAnimation[name] = path
		else:
			path = VR.pressAnimation[name]
	else:
		if name not in VR.releaseAnimation:
			path = VR.Path()
			path.addPoint(pos0, dir0, [0,0,0], up0)
		
			dir1 = dir0 - [0, 0.1, 0]
			path.addPoint(pos0, dir1, [0,0,0], up0)
		
			dir2 = dir0 - [0, 0.2, 0]
			path.addPoint(pos0, dir1, [0,0,0], up0)
		
			path.compute(2)
		
			VR.releaseAnimation[name] = path
		else:
			path = VR.releaseAnimation[name]
		
	#TODO: doAnimation
	#key.animate(path, duration, offset, doOrient?, doLoop)
	key.animate(path, 0.2, 0, True, False)
		
		
		
	'''
	def callback_animate(dev, torus):
	import VR
	
	if not hasattr(VR, 'p2') or True:	
		VR.p2 = VR.Path()
		d = 1.2
		# position, direction, color, up-vector
		VR.p2.addPoint([2.5,0,0], [0,0,d], [0,0,0], [0,1,0])
		VR.p2.addPoint([0,0,2.5], [-d,0,0], [0,0,0], [0,1,0])
		VR.p2.addPoint([-2.5,0,0], [0,0,-d], [0,0,0], [0,1,0])
		VR.p2.addPoint([0,0,-2.5], [d,0,0], [0,0,0], [0,1,0])
		VR.p2.close()
		VR.p2.compute(80) # do not forget this!
	
	def myAnim(t):
		print t
		p = VR.p2.getPose(t)
		torus.setPose(p)
		if t == 1: print 'end'
		
	a = VR.Animation('myAnim')
	a.setCallback(myAnim)
	a.setDuration(1)
	a.start()'''
</core>
      <arg type="VRPyTransformType" value="0" base_name="key" name_space="animWhiteKey" name_suffix="0" persistency="666"/>
      <arg type="int" value="0" base_name="pressed" name_space="animWhiteKey" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="animateCube" group="cubeAnim" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	pose = cube.getPose()
	cPos = pose.pos()
	cDir = pose.dir()
	zStart = cDir[2]
	cUp = pose.up()
	
	path = VR.Path()
	# position, direction, color, up-vector
	path.addPoint(cPos, cDir, [0,0,0], cUp)
	path.addPoint([cPos[0],cPos[1]-0.7,cPos[2]], cDir, [0,0,0], cUp)
	
	cDir = [cDir[0]+zStart,cDir[1],cDir[2]]
	path.addPoint([cPos[0],cPos[1]-0.9,cPos[2]], cDir, [0,0,0], cUp)
	
	cDir = [cDir[0],cDir[1],cDir[2]-zStart]
	path.addPoint([cPos[0],cPos[1]-1,cPos[2]], cDir, [0,0,0], cUp)
	
	cDir = [cDir[0],cDir[1],cDir[2]-zStart]
	path.addPoint([cPos[0],cPos[1]-0.9,cPos[2]], cDir, [0,0,0], cUp)
	
	cDir = [cDir[0]-zStart,cDir[1],cDir[2]]
	path.addPoint([cPos[0],cPos[1]-0.7,cPos[2]], cDir, [0,0,0], cUp)
	
	path.addPoint(cPos, cDir, [cDir[0],cDir[1],cDir[2]+2], cUp)
	path.compute(2)
	
	cube.animate(path, 0.5, 0, True)
</core>
      <arg type="VRPyObjectType" value="0" base_name="cube" name_space="animateCube" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="init" group="Inits" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	import time	
	
	# Light
	if hasattr(VR, 'Lamp'): 
		VR.Lamp.destroy()
		del VR.Lamp
	
	VR.Lamp = VR.Light('Lamp', 'light')
	#VR.Lamp.toggleShadows(True)
	#VR.Lamp.setOn(False)
	beacon = VR.LightBeacon('Lamp_Beacon')
	beacon.setTransform([0, 20, 0], [0, -1, 0], [0,1,0])
	VR.Lamp.setBeacon(beacon)

	VR.Scene = VR.Object('Scene')
	VR.Lamp.addChild(VR.Scene)
	
	
	# Set up camera
	cam = VR.find('Default')
	
	# Setup for the table
	#cam.setTransform([4.5,15,2], [0,0,-1], [0,1,0])
	
	# Setup for the screen
	cam.setTransform([0,13,10],[0,-4,-5],[0,1,0])
	
	VR.initMaterials()
	
	VR.target = {}
	VR.pressAnimation = {}
	VR.releaseAnimation = {}
	
	VR.whiteKeys = []
	VR.blackKeys = []

	
	# Floor
	floor = VR.Geometry("Floor")
	floor.setPrimitive("Plane 20 20 1 1")
	floor.setTransform([0, 0, 0], [0, 1, 0], [0,0,1])
	floor.setColor("brown")
	VR.Scene.addChild(floor)

	
	VR.initPiano()
		
		
	'''
	for i in range(Nx):
		h = 0.2*(1+i)
		z += h/2
		
		for j in range(Ny):
			box = VR.Geometry("Box"+str(i)+","+str(j))
			w = 0.2*(1+j)
			x += w/2
			#box.setPrimitive("Box 0.1 0.1 0.1 1 1 1")
			box.setPrimitive("Box "+str(w)+" 1 "+str(h)+" 1 1 1")
			box.setPosition([x,0,z])
			box.setMaterial(VR.redMat)
			#box.setPickable(True)
			VR.Scene.addChild(box)
			VR.boxes.append(box)
			
			x += w/2 + d
			
		x = -0.6
		z += h/2 + d
'''
	
	
</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="114" base_name="trigger" name_space="__global__" name_suffix="5" persistency="666"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="7" persistency="666"/>
    </Script>
    <Script base_name="initMaterials" group="Inits" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	VR.mats = {}
	
	pianoMat = VR.Material("Piano")
	pianoMat.setAmbient([0.001,0.001,0.001])
	pianoMat.setDiffuse([0.4,0.25,0.1])
	pianoMat.setSpecular([0.99,0.99,0.99])
	VR.mats["Piano"] = pianoMat
	
	lightMat = VR.Material("WhiteKey")
	lightMat.setAmbient([0.1,0.1,0.1])
	lightMat.setDiffuse([0.999,0.999,0.995])
	lightMat.setSpecular([0.999,0.999,0.999])
	VR.mats["WhiteKey"] = lightMat
	
	darkMat = VR.Material("BlackKey")
	darkMat.setAmbient([0.01,0.01,0.01])
	darkMat.setDiffuse([0.1,0.1,0.1])
	darkMat.setSpecular([0.99,0.99,0.99])
	VR.mats["BlackKey"] = darkMat
</core>
    </Script>
    <Script base_name="initPiano" group="Inits" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	
	if VR.find("Piano Base") != None:
		VR.find("Piano Base").destroy()
	
	
	nWhiteKeys = 52
	nBlackKeys = 36
	
	whiteDim = [0.24, 0.25, 1.5]
	blackDim = [0.18, 0.35, 1.0]
	dist = 0.015
	
	whiteName = ['A', 'H', 'C', 'D', 'E', 'F', 'G']
	blackName = ['A#', 'ERR', 'C#', 'D#', 'ERR', 'F#', 'G#']
	
	# Piano Base
	
	w = (nWhiteKeys + 2) * (whiteDim[0] + dist)
	l = 2.2 * whiteDim[2]
	h = 0.4
	
	x = 0.0
	z = 0.0
	
	base = VR.Geometry("Piano Base")
	base.setPrimitive("Box " + str(w) + " " + str(h) + " " + str(l) + " 1 1 1")
	base.setPosition([x, 8.0, -z])
	base.setMaterial(VR.mats["Piano"])
	
	VR.Scene.addChild(base)
	
	stand = VR.Geometry("Piano Stand")
	stand.setPrimitive("Box " + str(w) + " 10.0 " + str(0.5*l) + " 1 1 1")
	stand.setPosition([x, -3, -0.25*l])
	stand.setMaterial(VR.mats["Piano"])
	base.addChild(stand)
	
	
	# White Keys
	x = -(whiteDim[0] + dist) * (nWhiteKeys - 1) / 2.0
	y = 0.325 + whiteDim[1]*0.5
	z = 0
	
	for i in range(nWhiteKeys):
		# Creates a name according to note and position
		name = whiteName[i % 7] + "  " + str(i/7) + "  [WK " + str(i) + "]"
		whiteKey = VR.Geometry(name)
		whiteKey.setPrimitive("Box " + str(whiteDim[0]) + " " + str(whiteDim[1])
											+ " " + str(whiteDim[2]) + " 1 1 1")
											
		whiteKey.translate([0, -whiteDim[1]*0.5, whiteDim[2]*0.5])
		whiteKey.applyTransformation()
					
		whiteKey.setPosition([x, y, z])
		whiteKey.setMaterial(VR.mats["WhiteKey"])
		
		base.addChild(whiteKey)
		
		VR.whiteKeys.append(whiteKey)
		
		x = x + whiteDim[0] + dist
		
	# Black Keys
	x = -(whiteDim[0] + dist) * (nWhiteKeys - 2) / 2.0
	y = 0.375 + blackDim[1]*0.5
	z = 0
	
	counter = 0
	for i in range(nWhiteKeys - 1):
		if ((i - 1) % 7 != 0 and (i + 3) % 7 != 0):
			# Creates a name according to note and position
			name = blackName[i % 7] + " " + str(i/7) + "  [BK " + str(i - counter) + "]"
			blackKey = VR.Geometry(name)
			blackKey.setPrimitive("Box " + str(blackDim[0]) + " " + str(blackDim[1])
												+ " " + str(blackDim[2]) + " 1 1 1")
												
			blackKey.translate([0, -blackDim[1]*0.5, blackDim[2]*0.5])
			blackKey.applyTransformation()
			
			blackKey.setPosition([x, y, z])
			blackKey.setMaterial(VR.mats["BlackKey"])
		
			base.addChild(blackKey)
			
			VR.blackKeys.append(blackKey)
		else:
			counter += 1
		
		x = x + whiteDim[0] + dist
</core>
    </Script>
    <Script base_name="keyDrag" group="Interactions" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="20" key="0" base_name="trigger" name_space="__global__" name_suffix="9" persistency="666"/>
    </Script>
    <Script base_name="keyPress" group="Interactions" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	
	key = dev.getKey()

	#print dev.getName() + "["+ str(key) +"]: " + ("Pressed" if dev.getKeyState(key) else "Released")
	#print "Position: " + str(dev.getBeacon().getDir())
	
	caster = dev.getBeacon(key)
	if dev.intersect(VR.getRoot(), False, caster, [0,0,-1]):
		target = dev.getIntersected()
		VR.target[key] = target
		
		if target in VR.whiteKeys: 
			print target.getName()
			VR.animWhiteKey(target, True)
		elif target in VR.blackKeys:
			print target.getName()
			VR.animBlackKey(target, True)
	
		'''if dev.getState(): # Button is pressed
			#if (not key in VR.target or VR.target[key] is None or VR.target[key].getName() != target.getName()):
			VR.target[key] = target
			print "VR-target[" + str(key) + "] changed."
			#target.setColor('blue')
			
		else: # Button is released
			if VR.target[key] is None: return
	
			if VR.target[key].getName() == target.getName():
				VR.animateCube(target)
				newMat = VR.greenMat if target.getMaterial() == VR.redMat else VR.redMat
				target.setMaterial(newMat)
				#target.rotate(0,1,0,0.1)
			else:
				VR.switchCubes(VR.target[key], target)
			
			VR.target[key] = None
			'''
</core>
      <trig type="on_device" dev="mouse" state="Pressed" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="5" persistency="666"/>
      <trig type="on_device" dev="multitouch" state="Pressed" param="" key="-1" base_name="trigger" name_space="__global__" name_suffix="7" persistency="666"/>
    </Script>
    <Script base_name="keyRelease" group="Interactions" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR

	
	key = dev.getKey()


	caster = dev.getBeacon(key)
	
	if key in VR.target:
		target = VR.target[key]
		
		if target in VR.whiteKeys:
			VR.animWhiteKey(target, False)
		elif target in VR.blackKeys:
			VR.animBlackKey(target, False)
			
		VR.target[key] = None
	
</core>
      <trig type="on_device" dev="mouse" state="Released" param="" key="0" base_name="trigger" name_space="__global__" name_suffix="6" persistency="666"/>
      <trig type="on_device" dev="multitouch" state="Released" param="" key="-1" base_name="trigger" name_space="__global__" name_suffix="8" persistency="666"/>
    </Script>
    <Script base_name="switchCubes" group="cubeAnim" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	import math
	
	pose1 = cube1.getPose()
	pos1 = pose1.pos()
	dir1 = pose1.dir()

	pose2 = cube2.getPose()
	pos2 = pose2.pos()
	dir2 = pose2.dir()
	
	up = [0,1,0]
	col = [0,0,0]
	
	xDist = pos2[0] - pos1[0]
	zDist = pos2[2] - pos1[2]
	dist = math.sqrt(xDist**2 + zDist**2)
	
	pos1a = [pos1[0]*0.75+pos2[0]*0.25, 4.5, pos1[2]*0.75+pos2[2]*0.25]
	pos1b = [(pos1[0]+pos2[0])*0.5, 6, (pos1[2]+pos2[2])*0.5]
	pos1c = [pos1[0]*0.25+pos2[0]*0.75, 4.5, pos1[2]*0.25+pos2[2]*0.75]
	path1 = VR.Path()
	# position, direction, color, up-vector
	path1.addPoint(pos1, [0,1,0], col, up)
	#path1.addPoint(pos1a, dir1, col, up)
	path1.addPoint(pos1b, [xDist/dist,0,zDist/dist], col, up)
	#path1.addPoint(pos1c, dir1, col, up)
	path1.addPoint(pos2, [0,-1,0], col, up)
	path1.compute(20)
	
	pos2a = [pos1[0]*0.25+pos2[0]*0.75, -2.5, pos1[2]*0.25+pos2[2]*0.75]
	pos2b = [(pos1[0]+pos2[0])*0.5, -4, (pos1[2]+pos2[2])*0.5]
	pos2c = [pos1[0]*0.75+pos2[0]*0.25, -2.5, pos1[2]*0.75+pos2[2]*0.25]
	path2 = VR.Path()
	# position, direction, color, up-vector
	path2.addPoint(pos2, [0,-1,0], col, up)
	#pos2h = [(pos1[0]+pos2[0])/2.0, -2, (pos1[2]+pos2[2])/2.0]
	#path2.addPoint(pos2h, dir2, col, up)
	#path2.addPoint(pos2a, dir1, col, up)
	path2.addPoint(pos2b, [-xDist/dist,0,-zDist/dist], col, up)
	#path2.addPoint(pos2c, dir1, col, up)
	path2.addPoint(pos1, [0,1,0], col, up)
	path2.compute(20)
	#print path2.getPositions()
	
	cube1.animate(path1, 1, 0, False)
	#cube1.setPosition(pos2)
	cube2.animate(path2, 1, 0, False)
	#cube2.setPosition(pos1)
</core>
      <arg type="VRPyObjectType" value="0" base_name="cube1" name_space="switchCubes" name_suffix="0" persistency="666"/>
      <arg type="VRPyObjectType" value="0" base_name="cube2" name_space="switchCubes" name_suffix="0" persistency="666"/>
    </Script>
    <Script base_name="switchCubes2" group="cubeAnim" name_space="__script__" name_suffix="0" persistency="666" server="server1" type="Python">
      <core>
	import VR
	import math
	
	pose1 = cube1.getPose()
	pos1 = pose1.pos()
	dir1 = pose1.dir()

	pose2 = cube2.getPose()
	pos2 = pose2.pos()
	dir2 = pose2.dir()
	
	up = [0,1,0]
	col = [0,0,0]
	
	xDist = pos2[0] - pos1[0]
	zDist = pos2[2] - pos1[2]
	dist = math.sqrt(xDist**2 + zDist**2)
	
	path1 = VR.Path()
	# position, direction, color, up-vector
	path1.addPoint(pos1, [0,1,0], col, up)
	path1.addPoint([pos1[0], 4, pos1[2]], [0,1,0], col, up)
	
	#dir1a = [,0,]
	path1.addPoint([pos1[0], 4, pos1[2]], dir1a, col, up)
	
	pos1b = [(pos1[0]+pos2[0])*0.5 + zDist/dist * 2,
			4,
			(pos1[2]+pos2[2])*0.5 + xDist/dist * 2]		
	path1.addPoint(pos1b, dir1, col, up)

	
	path1.addPoint([pos2[0], 4, pos2[2]], dir1, col, up)
	#path1.addPoint([pos2[0], 4, pos2[2]], dir1, col, up)
	path1.addPoint(pos2, dir1, col, up)
	path1.compute(4)
	
	
	path2 = VR.Path()
	# position, direction, color, up-vector
	path2.addPoint(pos2, dir2, col, up)
	path2.addPoint([pos2[0], 4, pos2[2]], dir2, col, up)
	#path2.addPoint([pos2[0], 4, pos2[2]], dir2, col, up)
	
	pos2b = [(pos1[0]+pos2[0])*0.5 - zDist/dist * 2,
			4,
			(pos1[2]+pos2[2])*0.5 - xDist/dist * 2]		
	path2.addPoint(pos2b, dir2, col, up)
	
	path2.addPoint([pos1[0], 4, pos1[2]], dir2, col, up)
	#path2.addPoint([pos1[0], 4, pos1[2]], dir2, col, up)
	path2.addPoint(pos1, dir2, col, up)
	path2.compute(2)


	cube1.animate(path1, 1, 0, True)
	#cube1.setPosition(pos2)
	cube2.animate(path2, 1, 0, True)
	#cube2.setPosition(pos1)
</core>
      <arg type="VRPyObjectType" value="0" base_name="cube1" name_space="switchCubes2" name_suffix="0" persistency="666"/>
      <arg type="VRPyObjectType" value="0" base_name="cube2" name_space="switchCubes2" name_suffix="0" persistency="666"/>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.739269 0.842603 1" format=".jpg" path="./gfx/skybox/sky" persistency="666" type="2"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
